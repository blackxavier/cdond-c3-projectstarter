version: '2.1'
orbs:
  node: 'circleci/node@4.1'
  slack: circleci/slack@4.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: ${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - restore_cache:
          keys: [frontend-build]

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      
      - restore_cache:
          keys: [backend-build]

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: front-end build
          command: |
            cd frontend
            npm install
            npm run test
            
                    
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm install
            npm update
            npm audit fix  
            npm audit --audit-level=critical
      - slack/notify:
          channel: C0283DX3ATH
          event: fail
          template: basic_fail_1
            
  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a test notification. All builds going fine*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always
            
            
          
           

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end scan
          command: |
            cd backend
            npm install
            npm update
            npm audit fix
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
              yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=your-tag \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
                --tags project=udapeople
                 
             
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo [web] > .circleci/ansible/inventory.txt
            aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].PublicDnsName" --output text | grep ec2 | head -n1 >> .circleci/ansible/inventory.txt 
            cat .circleci/ansible/inventory.txt 
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      - checkout
      - run:
          name: SSH or Git client
          command: |
              apk add --update git openssh-client
      - add_ssh_keys: 
          fingerprints: ["d1:f3:59:e4:88:f9:1a:20:9c:36:63:f4:c1:31:b8:e4"]
      - attach_workspace:
          at: /tmp/.circleci/ansible

      - run:
          name: Install dependencies
          command: |
              apk add --no-cache \
              python3 \
              py3-pip \
              && pip3 install --upgrade pip \
              && pip3 install \
              awscli \
              && rm -rf /var/cache/apk/*
              apk add --update ansible
      - run:
          name: Configure server
          command: |
              cd .circleci/ansible/  
              cat inventory.txt
              ANSIBLE_HOST_KEY_CHECKING=0 ansible-playbook -i /tmp/.circleci/ansible/inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: node:13.8.0-buster
        user: root
    steps:
      - checkout
      - run:
          name: install aws cli
          command: |
            apt -y update
            apt -y install awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm update
            npm audit fix
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
  
                
                
            curl https://kvdb.io/Qj2BNL2ecbA7hRArY6refr/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    
    steps:
      - checkout
      - run:
          name: SSH or Git CLI client 
          command: |
              apk add --update git openssh-client
      - add_ssh_keys:
          fingerprints: ["d1:f3:59:e4:88:f9:1a:20:9c:36:63:f4:c1:31:b8:e4"] 
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
              apk add --no-cache \
              python3 \
              py3-pip \
              && pip3 install --upgrade pip \
              && pip3 install \
              awscli \
              && rm -rf /var/cache/apk/*
              apk add --update ansible
              apk add --update curl
              apk add --update nodejs
              apk add --update npm
              apk add --update tar                        
              apk add --update gzip
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  
  
          
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-backend:
          requires:
            - build-backend
          context:  ALX
      - scan-frontend:
          requires:
            - build-frontend
          context:  ALX
      - notify:
          requires:
            - build-frontend
            - build-backend
            - scan-frontend
            - scan-backend
          context: ALX
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]

